Usmjereni grafovi
Ukupan broj puteva izmedju izvora i odredista 
U tim putevima nema ciklusa 
tehnika backtracking

#include <iostream>
#include <list>
#include <vector>

using namespace std;

class Graf {
    int V;
    list<int> *lista;
    void BrojPuteva(int izvor, int odrediste, vector<bool> &posjecen, int &broj_puteva);
public:
    Graf(int V);
    void DodajGranu(int v, int w);
    int BrojPuteva(int izvor, int odrediste);
};

Graf::Graf(int V){
    this->V = V;
    lista = new list<int>[V];
}

void Graf::DodajGranu(int v, int w) {
    lista[v].push_back(w);
}

void Graf::BrojPuteva(int izvor, int odrediste, vector<bool> &posjecen, int &broj_puteva) {
    posjecen[izvor] = true;
    if(izvor == odrediste) {
        broj_puteva++;
    }else{
        list<int>::iterator it;
        for(it = lista[izvor].begin(); it != lista[izvor].end(); it++) {
            if(posjecen[*it] == false) {
                BrojPuteva(*it,odrediste,posjecen,broj_puteva);
            }
        }
    }
    posjecen[izvor] = false;      //  kad nadjes prvi put, oznaci odrediste kao false jer ga opet trazis 

}

int Graf::BrojPuteva(int izvor, int odrediste) {
    vector<bool> posjecen(V,false);
    int broj_puteva = 0;
    BrojPuteva(izvor,odrediste,posjecen,broj_puteva);
    return broj_puteva;
}


int main() {
  Graf g1(4);
  g1.DodajGranu(0, 1);
  g1.DodajGranu(0, 2);
  g1.DodajGranu(2, 0);
  g1.DodajGranu(0, 3);
  g1.DodajGranu(2, 1);
  g1.DodajGranu(1,3);
  cout << g1.BrojPuteva(2,3);

  return 0;
}
