#include <iostream>
#include <list>

using namespace std;

class Graf {
    int V;
    list<int> *lista;
    bool PostojiCiklus(int v, vector<bool> &posjecen, int roditelj);

public:
    Graf(int V);
    void DodajGranu(int v, int w);
    bool PostojiCiklus();
};

Graf::Graf(int V) {
    this->V = V;
    lista = new list<int>[V];
}

void Graf::DodajGranu(int v, int w) {
    lista[v].push_back(w);
    lista[w].push_back(v);
}

bool Graf::PostojiCiklus(int v, vector<bool> &posjecen, int roditelj) {
    posjecen[v] = true;
    list<int>::iterator it;
    for(it = lista[v].begin(); it != lista[v].end(); it++) {
        if(posjecen[*it] == false) {
            if(PostojiCiklus(*it,posjecen,v) == true){
                return true;
            }

        }else if(*it != roditelj){
            return true;
        }
    }
    return false;
}

bool Graf::PostojiCiklus() {
    vector<bool> posjecen(V);
    for(int i = 0; i < V; i++) {
        posjecen[i] = false;
    }

    for(int i = 0; i < V; i++) {
        if(posjecen[i] == false){
            if(PostojiCiklus(i,posjecen,-1) == true){
                return true;
            }
        }
    }
    return false;
}



int main() {
    Graf g1(5);
    g1.DodajGranu(1, 0);
    g1.DodajGranu(0, 2);
    g1.DodajGranu(2, 0);
    g1.DodajGranu(0, 3);
    g1.DodajGranu(3, 4);
    cout << g1.PostojiCiklus();

  return 0;
}

vremenska kompleknost : O ( V + E )