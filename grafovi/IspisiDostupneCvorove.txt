#include <iostream>
#include <vector>
#include <list>
#include <queue>

using namespace std;

class Graf {
    int V;
    list<int> *lista;
    vector<int> BFS(int cvor);
public:
    Graf(int V) {
        this->V = V;
        lista = new list<int> [V];
    }
    void DodajGranu(int u, int v) {
        lista[u].push_back(v);
        lista[v].push_back(u);
    }

    void IspisiDostupneCvorove(vector<int> &v);

};

vector<int> Graf::BFS(int cvor) {
    vector<bool> posjecen(V,false);
    posjecen[cvor] = true;

    vector<int> DostupniCvorovi;
    queue<int> Q;
    Q.push(cvor);

    while(!Q.empty()) {
        int trenutni = Q.front();
        Q.pop();
        list<int>::iterator it;
        for(it = lista[trenutni].begin(); it != lista[trenutni].end(); ++it) {
            if(!posjecen[*it]){
                posjecen[*it] = true;
                DostupniCvorovi.push_back(*it);
                Q.push(*it);
            }
        }
    }

    return DostupniCvorovi;

}

void Graf::IspisiDostupneCvorove(vector<int> &v) {

    for(int i = 0; i < v.size(); i++) {
        int cvor = v[i];
        vector<int> rezultat = BFS(cvor);
        cout << "Dostupni cvorovi od cvora " << cvor << " su : ";
        for(int j = 0; j < rezultat.size(); j++) {
            cout << rezultat[j] << " ";
        }
        cout << endl;
    }

}


int main()
{
    Graf g(8);
    g.DodajGranu(1,2);
    g.DodajGranu(1,3);
    g.DodajGranu(2,4);
    g.DodajGranu(5,6);
    g.DodajGranu(5,7);
    g.DodajGranu(6,7);

    vector<int> v = {1,2,5};
    g.IspisiDostupneCvorove(v);

    return 0;
}