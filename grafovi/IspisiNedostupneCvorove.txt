#include <iostream>
#include <vector>
#include <list>

using namespace std;

class Graf {
    int V;
    list<int> *lista;
    void DFS(int cvor, vector<bool> &posjecen);
public:
    Graf(int V) {
        this->V = V;
        lista = new list<int> [V];
    }
    void DodajGranu(int u, int v) {
        lista[u].push_back(v);
        lista[v].push_back(u);
    }

    void IspisiNedostupneCvorove(int cvor);

};

void Graf::DFS(int cvor, vector<bool> &posjecen) {
    posjecen[cvor] = true;
    list<int>::iterator it;
    for(it = lista[cvor].begin(); it != lista[cvor].end(); ++it) {
        if(!posjecen[*it]){
            DFS(*it,posjecen);
        }
    }
}

void Graf::IspisiNedostupneCvorove(int cvor) {
    vector<bool> posjecen(V,false);

    DFS(cvor,posjecen);
    cout << "Nedostupni cvorovi od cvora " << cvor << " su : ";
    for(int i = 0; i < V; i++){
        if(!posjecen[i]){
            cout << i << " ";
        }
    }
}


int main()
{
    Graf g(8);
    g.DodajGranu(0,1);
    g.DodajGranu(0,2);
    g.DodajGranu(1,2);
    g.DodajGranu(3,4);
    g.DodajGranu(4,5);
    g.DodajGranu(6,7);

    g.IspisiNedostupneCvorove(2);

    return 0;
}

vremenska kompleksnost : O ( V + E )