#include <iostream>

using namespace std;

class Lista {
    struct Cvor {
        int element;        // element cvora
        Cvor *sljedeci;     // pokazivac na sljedeci logicki cvor
    };
    int lduzina;        // duzina lijeve particije
    int dduzina;        // duzina desne particije
    Cvor *pocetak;      // pokazivac na pocetak liste
    Cvor *kraj;         // pokazivac na kraj liste
    Cvor *trenutni;     // pokazivac na prethodnika trenutnog elementa
public:
    Lista() : lduzina(0), dduzina(0), pocetak(nullptr), kraj(nullptr), trenutni(nullptr) {}
    int LDuzina() const { return lduzina; }
    int DDuzina() const { return dduzina; }
    void IdiNaPoziciju(int i);
    int &DajTrenutniElement() const;
    void DodajNaKraj(const int &x);
    void Umetni(const int &x);      // umetanje elementa na pocetak desne particije
    void Izbaci();                  // izbacuje prvi element iz desne particije
    bool Trazi(const int &x);
    bool JeLiPrazna() const { return lduzina + dduzina == 0; }
    int Duzina() const { return lduzina + dduzina; }
    void Obrni();
    void IspisiListu() const;
    void Brisi();
    ~Lista();
};

void Lista::DodajNaKraj(const int &x) {
    Cvor *novi = new Cvor;
    novi->element = x;
    novi->sljedeci = nullptr;
    if(lduzina + dduzina == 0) {
        pocetak = novi;                 //  slucaj kada je lista prazna
        kraj = novi;
    }else{
        kraj->sljedeci = novi;             // slucaj kada lista nije prazna
        kraj = novi;
    }
    dduzina++;      // moramo povecat jer se element dodaje u desnu particiju
}

void Lista::Izbaci(){
    if(dduzina == 0) {
        throw "Nema nista za izbaciti";
    }
    Cvor *pomocni;
    if(lduzina == 0){
        pomocni = pocetak;              // specijalan slucaj kada izbacujemo prvi element liste
        pocetak = pomocni->sljedeci;
    }else{
        pomocni = trenutni->sljedeci;           // slucaj kada izbacujemo prvi element iz desne particije koja ima barem 2 elementa
        trenutni->sljedeci = pomocni->sljedeci;
    }
    if ( dduzina = 1){            // specijalan slucaj kada se izbacuje zadnji element iz liste
        kraj = trenutni;
    }
    delete pomocni;
    dduzina--;

}

void Lista::IdiNaPoziciju(int i) {
    if(i < 0 || i > dduzina + lduzina){
        throw "Index izvan dozvoljenog raspona";
    }
    dduzina = dduzina + lduzina - i;
    lduzina = i;
    if(i==0){                   // specijalan slucaj
        trenutni = nullptr;
    }else{
        trenutni = pocetak;
        for(int j=0; j<i-1; j++){
            trenutni = trenutni->sljedeci;          // pokazivac trenutni poziciniramo na zadnji cvor u lijevoj particiji
        }
    }
}

void Lista::Umetni(const int &x) {
    Cvor *novi = new Cvor;
    novi->element = x;
    if(lduzina == 0){                   //  specijalan slucaj kada se novi element stavlja na pocetak liste
        novi->sljedeci = pocetak;
        pocetak = novi;
        if(lduzina + dduzina == 0){
            kraj = novi;                    //  slucaj kada je lista prazna
        }
    }else{
        novi->sljedeci = trenutni->sljedeci;
        trenutni->sljedeci = novi;
        if(dduzina == 0){
            kraj = novi;        // specijalan slucaj kada se element stavlja na kraj liste
        }
    }
    dduzina++;

}

bool Lista::Trazi(const int &x) {
    if(lduzina + dduzina == 0){
        throw "Lista je prazna";
    }
    Cvor *p(pocetak);
    bool nadjen(false);
    while( p!= nullptr && p->element != x){
        p = p->sljedeci;
    }
    if(p != nullptr){
        nadjen = true;
    }
    return nadjen;
}

int &Lista::DajTrenutniElement() const {
    if(dduzina == 0){
        throw "Nema nista za vratiti";
    }
    if(trenutni == nullptr){
        return pocetak->element;
    }else{
        return trenutni->sljedeci->element;
    }
}

void Lista::Brisi(){
    while(pocetak != nullptr){		// idemo od prvog do zadnjeg cvora i brisemo redom
        trenutni = pocetak;		// iskoristili "trenutni" umjesto da pravimo " Cvor *pomocni "koji bio obavljao istu f-ju kao i "trenutni"
        pocetak = pocetak->sljedeci;
        delete trenutni;
    }
    pocetak = kraj = trenutni = nullptr;
    lduzina = dduzina = 0;
}

void Lista::IspisiListu() const {
    for(Cvor *p = pocetak; p != nullptr; p = p->sljedeci) {
        cout << p->element << endl;
    }
}

void Lista::Obrni() {
    Cvor *p = pocetak;
    Cvor *q = nullptr;
    Cvor *r = nullptr;
    if(lduzina == 0){
        trenutni = pocetak;
    }else if(dduzina == 0){
        trenutni = nullptr;
    }else{
        trenutni = trenutni->sljedeci;
    }
    int temp = dduzina;
    dduzina = lduzina;
    lduzina = temp;
    while( p != nullptr ){
        r = q;
        q = p;
        p = p->sljedeci;
        q->sljedeci = r;
    }
    kraj = pocetak;
    pocetak = q;
}

Lista::~Lista() {
    Brisi();
}

int main()
{
    Lista lista;
    lista.Umetni(5);
    lista.DodajNaKraj(12);
    lista.DodajNaKraj(8);
    lista.DodajNaKraj(9);



    return 0;
}